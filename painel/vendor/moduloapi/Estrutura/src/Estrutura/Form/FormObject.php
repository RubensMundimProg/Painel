<?phpnamespace Estrutura\Form;use Estrutura\Form\Element\Combo;use Estrutura\Form\Element\Cpf;use Estrutura\Form\Element\FloatNumber;use Estrutura\Form\Element\Vetor;use RiskManager\CustomObjects\Service\CustomObjects;use RiskManager\OData\Filter;use RiskManager\Organization\Service\Asset;use RiskManager\Organization\Service\Group;use RiskManager\Organization\Service\People;use RiskManager\Workflow\Service\Attributes;use Zend\Form\Element\Hidden;use Zend\Form\Element;use Zend\InputFilter\InputFilter;class FormObject {    const TIPO_TEXT = 'Text';    const TIPO_CPF = '\Estrutura\Form\Element\Cpf';    const TIPO_DATE = 'Date';    const TIPO_HIDDEN = 'Hidden';    const TIPO_EMAIL = 'Email';    protected $namespace;    protected $riskManager = false;    /**     * @var AbstractForm     */    protected $form;    protected $elements = [];    /**     * @param $name     * @return FormElement     * @throws \Exception     */    public function get($name) {        if (!array_key_exists($name, $this->elements))            throw new \Exception("Elemento $name não encontrado.");        return $this->elements[$name];    }    public function __construct($namespace, AbstractForm $form, \Zend\InputFilter\InputFilter $inputFilter) {        $this->namespace = $namespace;        $this->form = $form;        $this->inputFilter = $inputFilter;    }    /**     * @param Element $element     * @return FormElement     */    public function add(Element $element) {        $name = $element->getName();        if (!isset($this->elements[$name])) {            $element->setAttributes(array(                'id' => $name,                'class' => 'form-control pop',            ));            $this->inputFilter->add(['name' => $element->getName(), 'required' => false]);            $formElement = new FormElement($element, $this->inputFilter);            $this->form->add($element);            $this->elements[$name] = $formElement;        }        return $this->elements[$name];    }    /**     * @param $name     * @return FormElement     */    public function hidden($name) {        return $this->add(new Hidden($name));    }    /**     * @param $name     * @return FormElement     */    public function date($name) {        $element = $this->add(new Element\Text($name));        $element->setAttribute('data-mask', 'date');        return $element;    }    public function datepicker($name){        $element = $this->add(new Element\Text($name));        $element->setAttribute('data-mask', 'datepicker');        $element->setAttribute('autocomplete', 'off');        $classes = $element->getAttribute('class');        $element->setAttribute('class', $classes.' datepicker');        return $element;    }    public function datevalid($name){        $element = $this->add(new Element\Text($name));        $element->setAttribute('data-mask', 'datepicker');        $classes = $element->getAttribute('class');        $element->setAttribute('class', $classes.' datepicker');        $element->addFilter('\Estrutura\Filter\DateDB');        return $element;    }    /**     * @param $name     * @return FormElement     */    public function captcha($name) {        $captchaService = $this->form->sm()->get('Captcha');        $captcha = new Element\Captcha($name);        $captcha->setCaptcha($captchaService);        $element = $this->add($captcha);        return $element;    }    /**     * @param $name     * @param $service     * @param string $chave     * @param string $valor     * @param string $metodo     * @param array $params     * @return FormElement     */    public function combo($name, $service, $chave = 'id', $valor = 'nome', $metodo = 'fetchAll', $params = []) {        $element = $this->add(new Combo($name));        $element->setOptions(['service' => $service, 'chave' => $chave, 'valor' => $valor, 'metodo' => $metodo, 'params' => $params]);        $element->setAttribute('data-ng-options', "k as v for (k,v) in arr" . ucfirst($name));        $element->setAttribute('data-source', "arr" . ucfirst($name));        return $element;    }    /**     *     * @param type $name     * @param type $valueOption     * @return FormElement     */    public function select($name, $valueOption = [],$multiple=false,$chosen=false) {        $element = $this->add(new Element\Select($name));        $element->setOptions(['value_options' => $valueOption]);        if($multiple) $element->setAttribute('multiple','multiple');        if($chosen) $element->setAttribute('data-chosen','true');        return $element;    }    /**     * Retorna uma lista de valores a partir do RM     * @param type $name     * @param type $valueOption     * @return FormElement     */    public function selectRm($name,$multiple=false, $identificador = NULL){        $info = new Attributes($name);        if($info->getTypeName() != 'SingleSelect') throw new \Exception('Campo inválido para Select');        $array = $info->getAllowedValues();        $opcoes = [''=>'Selecione...'];        foreach($array as $item){            $opcoes[$item] = $item;        }        ksort($opcoes);        if(is_null($identificador)) $identificador = $name;        return $this->select($identificador, $opcoes,$multiple);    }    /**     * Retorna uma lista de valores a partir do RM     * @param type $name     * @param type $valueOption     * @return FormElement     */    public function dateRM($name){        $element = $this->add(new Element\Text($name));        $classes = $element->getAttribute('class');        $element->setAttribute('class', $classes.' datepicker');        $element->setAttribute('data-mask', 'datepicker');        $element->setAttribute('autocomplete', 'off');        $element->addFilter('\Estrutura\Filter\DateRiskManager');        return $element;    }    /**     * Retorna uma lista de valores a partir do RM     * @param type $name     * @param type $valueOption     * @return FormElement     */    public function timeRM($name){        $element = $this->add(new Element\Text($name));        $classes = $element->getAttribute('class');        $element->setAttribute('class', $classes.' timepicker');        $element->setAttribute('data-mask', 'timepicker');        $element->setAttribute('autocomplete', 'off');        $element->addFilter('\Estrutura\Filter\TimeRiskManager');        return $element;    }    public function time($name){        $element = $this->add(new Element\Text($name));        $classes = $element->getAttribute('class');        $element->setAttribute('class', $classes.' timepicker');        $element->setAttribute('data-mask', 'timepicker');        return $element;    }    /**     * Retorna uma lista de valores a partir do RM     * @param type $name     * @param type $valueOption     * @return FormElement     */    public function peopleRM($name, $multiple=false){        $cache = new \Zend\Cache\Storage\Adapter\Filesystem();        $cache->getOptions()->setTtl(600);        $returnCache = $cache->getItem(md5($name.'people'), $cached);        if(!$cached){            $pessoas = new People();            $filter = new Filter();            $filter->setPageSize(100);            $pessoas->setFilter($filter);            $pessoas = $pessoas->fetchAll();            $options = [];            foreach($pessoas as $pessoa){                $options[$pessoa->getName()] = $pessoa->getName();            }            $cache->addItem(md5($name.'people'), json_encode($options));        } else {            $options = json_decode($returnCache, true);        }        $element = $this->select($name,$options,$multiple);        return $element;    }    public function peopleGroup($name, $multiple=false, $groupId = []){        $cache = new \Zend\Cache\Storage\Adapter\Filesystem();        $cache->getOptions()->setTtl(600);        $returnCache = $cache->getItem(md5($name.'group-peoples'), $cached);        if(!$cached){            $group = new Group();            $options = [''=>'Selecione'];            if(!empty($groupId)) {                foreach ($groupId as $id) {                    $group->setId($id);                    $group->setAnonimo();                    $filter = new Filter();                    $filter->setPageSize(100);                    $group->setFilter($filter);                    $pessoas = $group->getMembers();                    foreach($pessoas as $pessoa){                        $options[$pessoa->Id] = $pessoa->Name;                    }                }            } else {                $filter = new Filter();                $filter->setPageSize(100);                $group->setFilter($filter);                $pessoas = $group->fetchAll();                foreach($pessoas as $pessoa){                    $options[$pessoa->Id] = $pessoa->Name;                }            }            $cache->addItem(md5($name.'group-peoples'), json_encode($options));        } else {            $options = json_decode($returnCache, true);        }        $element = $this->select($name,$options,$multiple);        return $element;    }    /**     *     * @param type $name     * @param type $valueOption     * @return FormElement     */    public function radio($name, $valueOption = []) {        $element = $this->add(new Element\Radio($name));        $element->setOptions(['value_options' => $valueOption]);        $element->setAttribute('class', 'pop');        return $element;    }    /**     *     * @param type $name     * @param type $valueOption     * @return FormElement     */    public function checkbox($name, $valueOption = []) {        $element = $this->add(new Element\Checkbox($name));        $element->setOptions(['value_options' => $valueOption]);        $element = $this->addClass('pop',$element);        return $element;    }    /**     * @param $name     * @param null $label     * @return FormElement     */    public function text($name) {        $element = $this->add(new Element\Text($name));        $element->addFilter('StringTrim');        return $element;    }    /**     * @param $name     * @param null $label     * @return FormElement     */    public function textNoTags($name) {        $element = $this->add(new Element\Text($name));        $element->addTextValidatorsAndFilters();        return $element;    }    public function urgency($name) {        $element = $this->add(new Element\Select($name));        $element->setOptions(['value_options' => ['Selecione', 'Muito Baixa', 'Baixa', 'Média', 'Alta', 'Muito Alta']]);        return $element;    }    public function severity($name) {        $element = $this->add(new Element\Select($name));        $element->setOptions(['value_options' => ['Selecione', 'Muito Baixa', 'Baixa', 'Média', 'Alta', 'Muito Alta']]);        return $element;    }    public function relevance($name) {        $element = $this->add(new Element\Select($name));        $element->setOptions(['value_options' => ['Selecione', 'Muito Baixa', 'Baixa', 'Média', 'Alta', 'Muito Alta']]);        return $element;    }    /**     * @param $name     * @param null $label     * @return FormElement     */    public function money($name) {        $element = $this->add(new Element\Text($name));        $element->setAttribute('data-mask', 'money');        $element->addFilter('Estrutura\Filter\Decimal');        return $element;    }    /**     * @param $name     * @param null $label     * @return FormElement     */    public function password($name) {        $element = $this->add(new Element\Password($name));        return $element;    }    /**     * @param $name     * @param null $label     * @return FormElement     */    public function file($name, $multiple = false) {        $element = $this->add(new Element\File($name));        $element->setAttribute('class', '')                ->setAttribute('multiple', $multiple);        return $element;    }    /**     * @param $name     * @return FormElement     */    public function collection($name, $tipoElemento = null) {        if (!$tipoElemento)            $tipoElemento = new Element\Text();        $element = $this->add(new Vetor($name, [ 'target_element' => $tipoElemento]));        return $element;    }    /**     *     * @param type $name     * @return FormElement     */    public function textarea($name) {        $element = $this->add(new Element\Textarea($name));        $element->addTextValidatorsAndFilters();        return $element;    }    /**     * @param $name     * @param null $label     * @return FormElement     */    public function cpf($name) {        $element = $this->add(new Cpf($name));        $element->setAttribute('data-mask', 'cpf');        $element->addValidator('Estrutura\Validator\Cpf');        $element->addFilter('Estrutura\Filter\Cpf');        $element->addTextValidatorsAndFilters();        return $element;    }    /**     * @param $name     * @param null $label     * @return FormElement     */    public function telefone($name) {        $element = $this->add(new Element\Text($name));        $element->setAttribute('data-mask', 'telefone');        return $element;    }    /**     * @param $name     * @param null $label     * @return FormElement     */    public function cnpj($name) {        $element = $this->add(new Element\Text($name));        $element->setAttribute('data-mask', 'cnpj');        $element->addValidator('Estrutura\Validator\Cnpj');        $element->addFilter('Estrutura\Filter\Cpf');        $element->addTextValidatorsAndFilters();        return $element;    }    /**     * @param $name     * @param null $label     * @return FormElement     */    public function email($name) {        $element = $this->add(new Element\Email($name));        $element->addTextValidatorsAndFilters();        $element->addValidator('\Estrutura\Validator\EmailAddress', ['domain' => false, 'useMxCheck' => false]);        return $element;    }    /**     * @param $name     * @return FormElement     */    public function float($name) {        $element = $this->add(new FloatNumber($name));        $element->addFilter('Estrutura\Filter\Decimal');        return $element;    }    /**     * @param $name     * @param $label     * @return FormElement     */    public function submit($name, $label) {        $element = $this->add(new Element\Submit($name));        $element->value($label);        return $element;    }    /**     * @param $name     * @param $size     * @return FormElement     *///    public function number($name, $size) {////        $elemenet = $this->add(new Element\Text($name));//        $elemenet->addFilter('Estrutura\Filter\Decimal');//        $elemenet->mask('' . number_format(str_repeat('9', $size), 0, ',', '.') . '');//        $elemenet->maxLength($size);//        return $elemenet;//    }    public function number($name, $min=false, $max=false) {        $element = $this->add(new Element\Number($name));        $element->setAttribute('min',$min);        $element->setAttribute('max',$max);        $element->addFilter('Estrutura\Filter\Decimal');//        $element->setAttribute('data-mask', 'int');//        $element->addFilter('Estrutura\Filter\Decimal');//        $element->mask('' . number_format(str_repeat('9', $size), 0, ',', '.') . '');//        $element->maxLength($size);        return $element;    }    /**     * @param $name     * @return FormObject     */    public function subForm($name) {        $form = new AbstractForm($name);        $this->inputFilter->add(['name' => $form->getName(), 'required' => false]);        $formElement = new FormElement($form, $this->inputFilter);        $this->form->add($form);        $this->elements[$name] = $formElement;        $inputFilter = new InputFilter();        $objForm = new \Estrutura\Form\FormObject('cadastrarUsuario-' . $name, $form, $inputFilter);        return $objForm;    }    /**     * @param $name     * @return FormElement     */    public function cep($name) {        $element = $this->add(new Element\Text($name));        $element->setAttribute("data-mask", 'cep');        //$element->addFilter('\Estrutura\Filter\Cep');        ///$element->addValidator('\Estrutura\Validator\Cep');        return $element;    }    /**     * @param $name     * @return FormElement     */    public function integer($name) {        $element = $this->add(new Element\Number($name));        $element->addValidator('\Estrutura\Validator\Number');        $element->addFilter('StringTrim');        return $element;    }    public function cpfCnpj($name) {        $element = $this->add(new Element\Text($name));        $element->addValidator('\Estrutura\Validator\CpfCnpj');        return $element;    }    public function selectEstados($name,$multiple=false)    {        $estados = array(''=>'Selecione...',"AC"=>"Acre", "AL"=>"Alagoas", "AM"=>"Amazonas", "AP"=>"Amapá","BA"=>"Bahia","CE"=>"Ceará","DF"=>"Distrito Federal","ES"=>"Espírito Santo","GO"=>"Goiás","MA"=>"Maranhão","MT"=>"Mato Grosso","MS"=>"Mato Grosso do Sul","MG"=>"Minas Gerais","PA"=>"Pará","PB"=>"Paraíba","PR"=>"Paraná","PE"=>"Pernambuco","PI"=>"Piauí","RJ"=>"Rio de Janeiro","RN"=>"Rio Grande do Norte","RO"=>"Rondônia","RS"=>"Rio Grande do Sul","RR"=>"Roraima","SC"=>"Santa Catarina","SE"=>"Sergipe","SP"=>"São Paulo","TO"=>"Tocantins");        $element = $this->select($name,$estados,$multiple);        return $element;    }    protected $loadedObjects = [];    /**     * @param $name     * @param $objeto     * @return FormElement     * @throws \Exception     */    public function customObject($name, $objeto, $filter=false, $order = [])    {        $cache = new \Zend\Cache\Storage\Adapter\Filesystem();        $cache->getOptions()->setTtl(600);        $returnCache = $cache->getItem(md5($name.'object'), $cached);        if(!$cached){            $objeto = new $objeto;            $custom = new CustomObjects($objeto);            $filter = new Filter();            $filter->setPageSize(999);            $filter->where(Filter::F_EQ, Filter::A_BOOLEAN, 'Deleted', 'false');            /// Adiciona as diretivas de order do CustomObject            if($order){                foreach($order as  $key => $value) {                    $filter->addOrder($key, $value);                }            }            $custom->setFilter($filter);            $lista = $custom->fetchAll();            $tratado = [];            foreach($lista as $item){                $tratado[$item->getId()] = $item->getName();            }            $cache->addItem(md5($name.'object'), json_encode($tratado));        }else{            $tratado = json_decode($returnCache, true);        }        $element = $this->select($name,$tratado);        /// Adiciona as diretivas de filtro do CustomObject        if($filter){            //@TODO Incluir diretivas de Filtro        }        return $element;    }    /**     * @param $name     * @param $objeto     * @param $assetType     * @param $path     * @return FormElement     * @throws \Exception     */    public function assets($name, $assetType, $path=false, $multiple = false, $key='Id')    {        $cache = new \Zend\Cache\Storage\Adapter\Filesystem();        $cache->getOptions()->setTtl(600);        $returnCache = $cache->getItem(md5($name.$assetType.$path), $cached);        if(!$cached){            $asset = new Asset();            $filter = new Filter();            $filter->setPageSize(999);            $filter->where(Filter::F_EQ, Filter::A_STRING, 'AssetType',$assetType);            if($path) $filter->where(Filter::F_SUBSTRING, Filter::A_STRING, 'path',$path);            $asset->setFilter($filter);            $lista = $asset->fetchAll();            $tratado = [''=>'Selecione'];            foreach($lista as $item){                $tratado[$item->getId()] = $item->getName();            }            $cache->addItem(md5($name.$assetType.$path), json_encode($tratado));        }else{            $tratado = json_decode($returnCache, true);        }        $element = $this->select($name, $tratado, $multiple);        $permitidos = ['Path'];        if(in_array($key,$permitidos) && $key != 'Id'){            $element->addFilter('\Estrutura\Filter\AssetReturn'.$key);        }        return $element;    }    /**     * Retorna os nomes de elementos do Formulário     * @return array     */    protected function getElementsKeys(){        return array_keys($this->elements);    }    public function addClass($className,$element)    {        $element->setAttribute('class',$element->getAttribute("class"). " {$className}");        return $element;    }}